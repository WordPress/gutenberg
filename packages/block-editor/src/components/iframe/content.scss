.block-editor-iframe__body {
	position: relative;
	border: 0.01px solid transparent;
}

.block-editor-iframe__html {
	transform-origin: top center;
	// We don't want to animate the transform of the translateX because it is used
	// to "center" the canvas. Leaving it on causes the canvas to slide around in
	// odd ways.
	@include editor-canvas-resize-animation(transform 0s, scale 0s, padding 0s);

	&.zoom-out-animation {
		// we only want to animate the scaling when entering zoom out. When sidebars
		// are toggled, the resizing of the iframe handles scaling the canvas as well,
		// and the doubled animations cause very odd animations.
		@include editor-canvas-resize-animation(transform 0s);
	}
}

.block-editor-iframe__html.is-zoomed-out {
	$scale: var(--wp-block-editor-iframe-zoom-out-scale);
	$frame-size: var(--wp-block-editor-iframe-zoom-out-frame-size);
	$inner-height: var(--wp-block-editor-iframe-zoom-out-inner-height);
	$content-height: var(--wp-block-editor-iframe-zoom-out-content-height);
	$scale-container-width: var(--wp-block-editor-iframe-zoom-out-scale-container-width);
	$container-width: var(--wp-block-editor-iframe-zoom-out-container-width, 100vw);
	// Apply an X translation to center the scaled content within the available space.
	transform: translateX(calc((#{$scale-container-width} - #{$container-width}) / 2 / #{$scale}));
	scale: #{$scale};
	background-color: $gray-300;

	// Chrome seems to respect that transform scale shouldn't affect the layout size of the element,
	// so we need to adjust the height of the content to match the scale by using negative margins.
	$extra-content-height: calc(#{$content-height} * (1 - #{$scale}));
	$total-frame-height: calc(2 * #{$frame-size} / #{$scale});
	$total-height: calc(#{$extra-content-height} + #{$total-frame-height} + 2px);
	margin-bottom: calc(-1 * #{$total-height});
	// Add the top/bottom frame size. We use scaling to account for the left/right, as
	// the padding left/right causes the contents to reflow, which breaks the 1:1 scaling
	// of the content.
	padding-top: calc(#{$frame-size} / #{$scale});
	padding-bottom: calc(#{$frame-size} / #{$scale});

	body {
		min-height: calc((#{$inner-height} - #{$total-frame-height}) / #{$scale});

		> .is-root-container:not(.wp-block-post-content) {
			flex: 1;
			display: flex;
			flex-direction: column;
			height: 100%;

			> main {
				flex: 1;
			}
		}
	}
}
