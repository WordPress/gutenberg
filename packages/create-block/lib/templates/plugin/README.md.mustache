# {{title}}

{{title}} is a {{#isStaticVariant}}static{{/isStaticVariant}}{{#isDynamicVariant}}dynamic{{/isDynamicVariant}} block scaffolded by {{author}} using the `@wordpress/create-block` package.

## The structure of the project
```
│
│── build
│
│── node_modules
│
│── src
│    │
│    │── block.json
│    │
│    │── edit.js
│    │
│    │── editor.scss
│    │
│    │── index.js
│    │
{{#isDynamicVariant}}
│    │── render.php
{{/isDynamicVariant}}
{{#isStaticVariant}}
│    │── save.js
{{/isStaticVariant}}
│    │
│    │── style.scss
│    │
│    └── view.js
│
│── .editorconfig
│
│── .gitignore
│
│── {{slugSnakeCase}}.php
│
│── package-lock.json
│
│── package.json
│
│── README.md (this file)
│
└── readme.txt
```

## Files and directories

### build
The `build` directory is where the final deployable build of the block will go. The build process will put compiled versions of files from the `src` directory in here. You should never need to touch this directory directly. 

### node_modules
The `node_modules` directory is where all the modules that the build process depends on live. Again you should never need to directly modify the contents of this directory. To install packages here use `npm install {package-name}` or define it as a 'dependency' or 'devDependency' in `package.json`.

### src
The `src` directory contains the files that you will primarily work with to create the markup and the functionality of your block. During the build step files here are compiled into the `build` directory. 

#### src/block.json
`block.json` stores the metadata for the block structured as a JSON object. Amongst other thing you’ll use this file to define attributes that the functions defined in edit.js and save.js can consume as parameters. [Learn more](https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/)

#### src/edit.js
`edit.js` exports a component, `Edit()`, that is rendered in the editor and so determines how the block appears and functions within the editor. It is where you will define the markup and content of the block. It is also where you will provide controls for the user to interact with the block and customize the appearance and content of the block. The `Edit()` component defined in this file receives a props object which among other things will contain the attributes defined in `block.json`. `setAttributes` is also passed to allow you to update the attribute values.

#### src/editor.scss
`editor.scss` is a file containing SCSS that styles the appearance of the block in the block editor. It requires a compile step which will result in `build/index.css`. 

#### src/index.js
`index.js` is the starting point for the JavaScript execution of the block. It imports the component exported by `edit.js`{{#isStaticVariant}} and the function exported by `save.js`{{/isStaticVariant}} and then executes `registerBlockType` passing as parameters the name of the block (retrieved from the `name` property in `block.json`) and an object containing an `edit` property{{#isStaticVariant}} and a `save` property{{/isStaticVariant}}.

{{#isDynamicVariant}}
#### src/render.php
This file performs the server-side rendering in a **dynamic** block.
{{/isDynamicVariant}}
{{#isStaticVariant}}
#### src/save.js
In a **static** block `save.js` exports a function, `save()`, that determines the markup that will be saved to the `post_content` field in the `wp_posts` table when a post or page containing this block is saved, and hence determines how the block appears and functions in the front end. As with `edit.js` the function defined here receives props that will include the attributes defined in `block.json`.
{{/isStaticVariant}}

#### src/style.scss
`style.scss` contains SCSS that styles the appearance of the block in the front end. It will also be used in the editor unless a style defined here is over-ridden by one in `editor.scss`. This file requires a compile step which will result in `build/style-index.css`. 

#### src/view.js
When this file is defined as the value of the `viewScript` property in `block.json` it will be enqueued on the front end of the site. You can use this file for JavaScript code that you want to run in the front-end on posts/pages that contain this block.

### .editorconfig
Unifies the coding style for different editors and IDEs

### .gitignore
Specifies files that should untracked and ignored by Git.

### {{slugSnakeCase}}.php
The main plugin file that contains the plugin's [header information](https://developer.wordpress.org/plugins/plugin-basics/header-requirements/) and initiates execution of the plugin.

### package-lock.json
This file is automatically generated for any operations where npm modifies either the `node_modules` tree, or `package.json`. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates. [Learn more](https://docs.npmjs.com/cli/v9/configuring-npm/package-lock-json)

### package.json
A manifest file for node that contains metadata about the project. Dependencies for the project and scripts are defined in this file. See [this guide](https://docs.npmjs.com/cli/v8/configuring-npm/package-json) to `package.json` to learn about the options defined here.

### README.md
[This file]
Provides an overview of the project.

### readme.txt
If you intend to [publish](https://developer.wordpress.org/plugins/wordpress-org/) your project to the [WordPress Plugin Directory](https://wordpress.org/plugins/) a `readme.txt` file is required. The `readme.txt` file needs to be in a [certain format](https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/). This file provides a template that you can modify.

## Learn Block Development
{{#isStaticVariant}}
For a progressive step-by-step tutorial on creating a static block check out [Introduction to Block Development: Build your first custom block](https://learn.wordpress.org/course/introduction-to-block-development-build-your-first-custom-block/)
{{/isStaticVariant}}
{{#isDynamicVariant}}
To learn about creating a dynamic block check out [Creating dynamic blocks](https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/) and [Block Supports in dynamic blocks](https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks/) in the Block Editor Handbook.
{{/isDynamicVariant}}