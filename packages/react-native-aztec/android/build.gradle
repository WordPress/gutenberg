buildscript {
    ext {
        // node modules
        supportLibVersion = '29.0.2'
        tagSoupVersion = '1.2.1'
        glideVersion = '3.7.0'
        picassoVersion = '2.5.2'
        robolectricVersion = '3.5.1'
        jUnitVersion = '4.12'
        jSoupVersion = '1.10.3'
        espressoVersion = '3.0.1'

        // libs
        aztecVersion = 'v2.1.2'
        wordpressUtilsVersion = '3.3.0'

        // main
        androidxAppcompatVersion = '1.2.0'
        androidxCardviewVersion = '1.0.0'
        androidxGridlayoutVersion = '1.0.0'
        androidxLegacyVersion = '1.0.0'
        androidxRecyclerviewVersion = '1.1.0'

        // test
        junitAztecVersion = '4.13'
    }
}

plugins {
    id "com.android.library"
    id "org.jetbrains.kotlin.android"
    id "maven-publish"
    id "com.automattic.android.publish-to-s3"
}

// import the `readReactNativeVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/742448b9588b3a0aa580a5e80ae95bdf/raw/8eb62d40ee7a5104d2fcaeff21ce6f29bd93b054/readReactNativeVersion.gradle'

group = 'org.wordpress.gutenberg-mobile'

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    namespace "org.wordpress.mobile.ReactNativeAztec"

    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                java.srcDirs += "src/${dir}/kotlin"
                res.srcDirs "src/${dir}/res"
            }
        }

        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }

    lint {
        disable 'GradleCompatible'
        abortOnError false
    }
}

repositories {
    maven {
        url "https://a8c-libs.s3.amazonaws.com/android"
        content {
            includeGroup "org.wordpress"
            includeGroup "org.wordpress.aztec"
        }
    }
    maven { url "https://a8c-libs.s3.amazonaws.com/android/react-native-mirror" }
    google()
    mavenCentral()
}

dependencies {
    api "org.wordpress:aztec:$aztecVersion"
    api "org.wordpress.aztec:wordpress-shortcodes:$aztecVersion"
    api "org.wordpress.aztec:wordpress-comments:$aztecVersion"
    api "org.wordpress.aztec:glide-loader:$aztecVersion"
    implementation "org.wordpress:utils:$wordpressUtilsVersion"

    implementation "androidx.legacy:legacy-support-v4:$androidxLegacyVersion"
    implementation "androidx.gridlayout:gridlayout:$androidxGridlayoutVersion"
    implementation "androidx.cardview:cardview:$androidxCardviewVersion"
    implementation "androidx.appcompat:appcompat:$androidxAppcompatVersion"
    implementation "androidx.recyclerview:recyclerview:$androidxRecyclerviewVersion"

    testImplementation "junit:junit:$junitAztecVersion"

    def rnVersion = readReactNativeVersion('../../../package.json', 'devDependencies')
    println "react-native version for react-native-aztec: $rnVersion"
    implementation "com.facebook.react:react-android:$rnVersion"
}

project.afterEvaluate {
    publishing {
        publications {
            ReactNativeAztecPublication(MavenPublication) {
                artifact bundleReleaseAar

                groupId 'org.wordpress.gutenberg-mobile'
                artifactId 'react-native-aztec'
                // version is set by 'publish-to-s3' plugin

                addDependenciesToPom(pom)
            }
        }
   }
}

def addDependenciesToPom(pom) {
    pom.withXml {
        def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

        // Iterate over the implementation dependencies, adding a <dependency> node for each
        configurations.implementation.allDependencies
                .findAll { it instanceof ExternalDependency && it.name != 'unspecified' }
                .each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
    }
}
