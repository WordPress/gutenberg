# How the Interactivity API works: An In-Depth Look

To fully understand how the Interactivity API works, let's examine a request to a hypothetical `/interactive` page.

The `/interactive` page is a standard page that includes an accordion block within its static content. In this scenario, the request will go through the following phases:

## Server-side processing begins

### 1. Initial processing

WordPress handles the initial request to the `/interactive` page, triggering all the usual hooks during processing.

### 2. HTML DOM processing

At this stage, the current theme generates the markup for the request. During this process, the section containing the interactive accordion block is rendered:

```php
// render.php
<?php wp_interactivity_state('accordion', [
  'isOpen'             => false,
  'isLastItemSet'      => false,
  'lastOpenedItemName' => "",
]); ?>

<div class="accordion"
     data-wp-interactive="accordion"
<?php echo wp_interactivity_data_wp_context(["openItemMessage" => __('Current open item is', 'domain'), "closedItemMessage" => __('Items are closed.', 'domain'), "lastOpenItemMessage"=> __('Last opened item is', 'domain'),]); ?>
      data-wp-class--dark="state.isDark">
    <div class='accordion__panel'>
        <div class='accordion__heading-opened' data-wp-bind--hidden="!state.isOpen">
            <span data-wp-text="context.openItemMessage"></span>&nbsp;
            <span class='accordion__open-item-name' data-wp-text="state.lastOpenedItemName"></span>
        </div>
        <div class='accordion__heading-closed' data-wp-bind--hidden="state.isOpen">
            <span data-wp-text="context.closedItemMessage"></span>
            <p class='accordion__closed-item' data-wp-bind--hidden="!state.isLastItemSet">
                <span data-wp-text="context.lastOpenItemMessage"></span>&nbsp;
                <span class='accordion__closed-item-name' data-wp-text="state.lastOpenedItemName"></span>
            </p>
        </div>
    </div>

    <div class='accordion__item' data-wp-context='{"isItemClosed":true,"itemName":"First"}'>
        <p class='accordion__item-title' data-wp-on--click="actions.toggleItem" data-wp-text="context.itemName"></p>
        <div class='accordion__item-content' data-wp-bind--hidden="context.isItemClosed">Content of the first item</div>
    </div>

    <div class='accordion__item' data-wp-context='{"isItemClosed":true, "itemName":"Second"}'>
        <p class='accordion__item-title' data-wp-on--click="actions.toggleItem" data-wp-text="context.itemName"></p>
        <div class='accordion__item-content' data-wp-bind--hidden="context.isItemClosed">Content of the second item
        </div>
    </div>
</div> 
```

Note: The `wp_interactivity_state` and `wp_interactivity_data_wp_context` calls are necessary for this example but are not required for the Interactivity API to function in general. 
On the other hand, the `data-wp-interactive="accordion"` directive is required and informs the Interactivity API that the element and its nested DOM elements should be recognized by the API.

The following will happen:

#### 2.1) The `wp_interactivity_state` call initializes some server-side state for the block.

This state is stored in a global variable that maintains the state of all blocks throughout the request.

#### 2.2) The `wp_interactivity_data_wp_context` call converts the passed variables into a data attribute with JSON.

In this example, the defined strings are translated (if necessary) and converted into the `data-wp-context` attribute:

```html
data-wp-context='{"openItemMessage":"Current open item is","closedItemMessage":"Items are closed","lastOpenItemMessage":"Last opened item is"}
```

#### 2.3) When WordPress encounters `data-wp-interactive="accordion"`, it processes the block directives.

In this case, there are 7 directives to be processed: 2 `data-wp-bind--hidden`, 5 `data-wp-text`, and `data-wp-class--dark`. 
Using the [HTML API](https://developer.wordpress.org/reference/classes/wp_html_tag_processor/) and the defined data (the state from the global block-related PHP variable and variables as JSON attributes), WordPress processes these directives and updates the markup.

As a result, the `<span>` will contain the translated text, and the `hidden` attribute will be added to the matching (first) item. 
The `data-wp-class--dark` directive will be processed but its value is unset so the dark class will not be applied. This directive represents a client-only state, which will be defined on the client side.

### 3. Scripts enqueuing

#### 3.1) WordPress automatically adds the `interactivity.min.js` script alias.

In addition to adding the `<script>` tags for all assets used on the page, WordPress will automatically include the `@wordpress/interactivity` alias, 
which points to the `/wp-includes/js/dist/interactivity.min.js` script. This occurs only on pages that contain at least one interactive block.

Note: Alias refers to the [ImportMap browser feature](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap), which allows defining short and clear names for import statements within the page. 
The Interactivity alias is automatically added by WordPress. To learn more, read about [script modules in WordPress](https://make.wordpress.org/core/2024/03/04/script-modules-in-6-5/).

#### 3.2) WordPress automatically enqueues the block script (only for Gutenberg blocks).

Blocks using the Interactivity API can define the state and actions in JavaScript files. This JS is automatically enqueued by WordPress.
For the accordion block, the JavaScript code handles both the state and actions:

```js
import {store, getContext, getElement} from '@wordpress/interactivity';

const {state} = store('accordion', {
    state: {
        isDark: window.matchMedia('(prefers-color-scheme: dark)').matches,
        openedItemTitle: null,
        get isLastItemSet() {
            return '' !== state.lastOpenedItemName;
        },
        get isOpen() {
            return null !== state.openedItemTitle;
        }
    },
    actions: {
        toggleItem: (event) => {
            let titleElement = event.target;
            let context = getContext();

            // Handle closing the previous item
            if (null !== state.openedItemTitle &&
                titleElement !== state.openedItemTitle) {
                state.openedItemTitle.click();
            }

            // Toggle the current item
            context.isItemClosed = !context.isItemClosed;

            // update the top state
            state.lastOpenedItemName = context.itemName;
            state.openedItemTitle = false === context.isItemClosed ?
                titleElement :
                null;
        }
    }
});
```

Note: Automatic enqueueing of the block script occurs only within Gutenberg blocks. For other cases, the script must be enqueued manually.

Additionally, adding the API script alias does not mean the asset is loaded in the browser. The API script will be loaded (once) during the import command processing within the block's JavaScript:

```javascript
import {store, getContext, getElement} from '@wordpress/interactivity';
```

If the block does not have any JavaScript code, the interactivity JavaScript will not be enqueued. 
This might seem confusing at first, but it makes sense upon closer consideration: no block JavaScript means no actions or client-side state, so the server delivers the final markup without any further changes.

Once client-side interactions are required, JavaScript code is added to the block, and the general interactivity script is enqueued.

#### 3.3) State variables are added as JSON:

State variables for all blocks on the page are included as JSON within a dedicated `<script>` tag:

 ```html

<script type="application/json" id="wp-interactivity-data">
	{"state":{"accordion":{"isOpen":false,"isLastItemSet":false,"lastOpenedItemName":""}}}
</script>
   ```

In this case, the state for the single accordion block is added.

### 4. HTML sending

After this, the generated HTML is sent to the client side.

## Part B: Client side

On the client side, the page is processed as usual: the markup is parsed, JavaScript and CSS are loaded, and the `DOMContentLoaded` and `window.load` events are fired.

### 1. Interactivity script initial processing

After being loaded by the browser, the script initializes by reading all the data, attaching listeners, and processing directives that include JavaScript-only state.

A block can have directives with a state defined solely in the block's JavaScript. In the accordion example, the `data-wp-class--dark="state.isDark"` directive was used.

This directive was omitted on the server side due to the missing variable in the state. On the client side, the related directive will now be processed. If the dark theme is in use, the class will be added accordingly:

```javascript
import {store, getContext, getElement} from '@wordpress/interactivity';

const {state} = store('accordion', {
	state: {
		isDark: window.matchMedia('(prefers-color-scheme: dark)').matches,
		// ....
	}
});
```

The client-side-only approach for the state should be used only when there are specific requirements. Unlike server-processed directives, this approach is not SEO-friendly.

### 2. Interactivity actions and changes processing

Following this, the usual DOM lifecycle occurs, including events and DOM changes. 
The Interactivity API simplifies this process by providing a powerful abstraction, eliminating the need for manual querying and manipulation of DOM nodes. 
This allows you to focus more on the logic itself.
