"use strict";(self.webpackChunkgutenberg=self.webpackChunkgutenberg||[]).push([[5863],{"./packages/dom/build-module/dom/get-computed-style.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>getComputedStyle});var _utils_assert_is_defined__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/dom/build-module/utils/assert-is-defined.js");function getComputedStyle(element){return(0,_utils_assert_is_defined__WEBPACK_IMPORTED_MODULE_0__.e)(element.ownerDocument.defaultView,"element.ownerDocument.defaultView"),element.ownerDocument.defaultView.getComputedStyle(element)}},"./packages/dom/build-module/dom/get-scroll-container.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>getScrollContainer});var _get_computed_style__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/dom/build-module/dom/get-computed-style.js");function getScrollContainer(node,direction="vertical"){if(node){if(("vertical"===direction||"all"===direction)&&node.scrollHeight>node.clientHeight){const{overflowY}=(0,_get_computed_style__WEBPACK_IMPORTED_MODULE_0__.A)(node);if(/(auto|scroll)/.test(overflowY))return node}if(("horizontal"===direction||"all"===direction)&&node.scrollWidth>node.clientWidth){const{overflowX}=(0,_get_computed_style__WEBPACK_IMPORTED_MODULE_0__.A)(node);if(/(auto|scroll)/.test(overflowX))return node}return node.ownerDocument===node.parentNode?node:getScrollContainer(node.parentNode,direction)}}},"./packages/dom/build-module/utils/assert-is-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function assertIsDefined(val,name){0}__webpack_require__.d(__webpack_exports__,{e:()=>assertIsDefined})},"./packages/components/src/modal/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>src_modal});var clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),react=__webpack_require__("./node_modules/react/index.js"),react_dom=__webpack_require__("./node_modules/react-dom/index.js"),use_instance_id=__webpack_require__("./packages/compose/build-module/hooks/use-instance-id/index.js"),use_focus_on_mount=__webpack_require__("./packages/compose/build-module/hooks/use-focus-on-mount/index.js"),use_constrained_tabbing=__webpack_require__("./packages/compose/build-module/hooks/use-constrained-tabbing/index.js"),use_focus_return=__webpack_require__("./packages/compose/build-module/hooks/use-focus-return/index.js"),use_merge_refs=__webpack_require__("./packages/compose/build-module/hooks/use-merge-refs/index.js"),build_module=__webpack_require__("./packages/i18n/build-module/index.js"),library_close=__webpack_require__("./packages/icons/build-module/library/close.js"),get_scroll_container=__webpack_require__("./packages/dom/build-module/dom/get-scroll-container.js");const LIVE_REGION_ARIA_ROLES=new Set(["alert","status","log","marquee","timer"]),hiddenElementsByDepth=[];function elementShouldBeHidden(element){const role=element.getAttribute("role");return!("SCRIPT"===element.tagName||element.hasAttribute("hidden")||element.hasAttribute("aria-hidden")||element.hasAttribute("aria-live")||role&&LIVE_REGION_ARIA_ROLES.has(role))}var src_button=__webpack_require__("./packages/components/src/button/index.tsx"),style_provider=__webpack_require__("./packages/components/src/style-provider/index.tsx"),with_ignore_ime_events=__webpack_require__("./packages/components/src/utils/with-ignore-ime-events.ts"),component=__webpack_require__("./packages/components/src/spacer/component.tsx"),use_reduced_motion=__webpack_require__("./packages/compose/build-module/hooks/use-reduced-motion/index.js"),config_values=__webpack_require__("./packages/components/src/utils/config-values.js"),warning_build_module=__webpack_require__("./packages/warning/build-module/index.js");const FRAME_ANIMATION_DURATION=config_values.A.transitionDuration,FRAME_ANIMATION_DURATION_NUMBER=Number.parseInt(config_values.A.transitionDuration),EXIT_ANIMATION_NAME="components-modal__disappear-animation";var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ModalContext=(0,react.createContext)(new Set),bodyOpenClasses=new Map;const Modal=(0,react.forwardRef)((function UnforwardedModal(props,forwardedRef){const{bodyOpenClassName="modal-open",role="dialog",title=null,focusOnMount=!0,shouldCloseOnEsc=!0,shouldCloseOnClickOutside=!0,isDismissible=!0,aria={labelledby:void 0,describedby:void 0},onRequestClose,icon,closeButtonLabel,children,style,overlayClassName:overlayClassnameProp,className,contentLabel,onKeyDown,isFullScreen=!1,size,headerActions=null,__experimentalHideHeader=!1}=props,ref=(0,react.useRef)(),instanceId=(0,use_instance_id.A)(Modal),headingId=title?`components-modal-header-${instanceId}`:aria.labelledby,focusOnMountRef=(0,use_focus_on_mount.A)("firstContentElement"===focusOnMount?"firstElement":focusOnMount),constrainedTabbingRef=(0,use_constrained_tabbing.A)(),focusReturnRef=(0,use_focus_return.A)(),contentRef=(0,react.useRef)(null),childrenContainerRef=(0,react.useRef)(null),[hasScrolledContent,setHasScrolledContent]=(0,react.useState)(!1),[hasScrollableContent,setHasScrollableContent]=(0,react.useState)(!1);let sizeClass;isFullScreen||"fill"===size?sizeClass="is-full-screen":size&&(sizeClass=`has-size-${size}`);const isContentScrollable=(0,react.useCallback)((()=>{if(!contentRef.current)return;const closestScrollContainer=(0,get_scroll_container.A)(contentRef.current);contentRef.current===closestScrollContainer?setHasScrollableContent(!0):setHasScrollableContent(!1)}),[contentRef]);(0,react.useEffect)((()=>(function modalize(modalElement){const elements=Array.from(document.body.children),hiddenElements=[];hiddenElementsByDepth.push(hiddenElements);for(const element of elements)element!==modalElement&&elementShouldBeHidden(element)&&(element.setAttribute("aria-hidden","true"),hiddenElements.push(element))}(ref.current),()=>function unmodalize(){const hiddenElements=hiddenElementsByDepth.pop();if(hiddenElements)for(const element of hiddenElements)element.removeAttribute("aria-hidden")}())),[]);const onRequestCloseRef=(0,react.useRef)();(0,react.useEffect)((()=>{onRequestCloseRef.current=onRequestClose}),[onRequestClose]);const dismissers=(0,react.useContext)(ModalContext),[nestedDismissers]=(0,react.useState)((()=>new Set));(0,react.useEffect)((()=>{dismissers.add(onRequestCloseRef);for(const dismisser of dismissers)dismisser!==onRequestCloseRef&&dismisser.current?.();return()=>{for(const dismisser of nestedDismissers)dismisser.current?.();dismissers.delete(onRequestCloseRef)}}),[dismissers,nestedDismissers]),(0,react.useEffect)((()=>{var _bodyOpenClasses$get;const theClass=bodyOpenClassName,oneMore=1+(null!==(_bodyOpenClasses$get=bodyOpenClasses.get(theClass))&&void 0!==_bodyOpenClasses$get?_bodyOpenClasses$get:0);return bodyOpenClasses.set(theClass,oneMore),document.body.classList.add(bodyOpenClassName),()=>{const oneLess=bodyOpenClasses.get(theClass)-1;0===oneLess?(document.body.classList.remove(theClass),bodyOpenClasses.delete(theClass)):bodyOpenClasses.set(theClass,oneLess)}}),[bodyOpenClassName]);const{closeModal,frameRef,frameStyle,overlayClassname}=function useModalExitAnimation(){const frameRef=(0,react.useRef)(),[isAnimatingOut,setIsAnimatingOut]=(0,react.useState)(!1),isReducedMotion=(0,use_reduced_motion.A)(),closeModal=(0,react.useCallback)((()=>new Promise((closeModalResolve=>{const frameEl=frameRef.current;if(isReducedMotion)return void closeModalResolve();if(!frameEl)return!0===globalThis.SCRIPT_DEBUG&&(0,warning_build_module.A)("wp.components.Modal: the Modal component can't be closed with an exit animation because of a missing reference to the modal frame element."),void closeModalResolve();let handleAnimationEnd;Promise.race([new Promise((animationResolve=>{handleAnimationEnd=e=>{e.animationName===EXIT_ANIMATION_NAME&&animationResolve()},frameEl.addEventListener("animationend",handleAnimationEnd),setIsAnimatingOut(!0)})),new Promise((timeoutResolve=>{setTimeout((()=>timeoutResolve()),1.2*FRAME_ANIMATION_DURATION_NUMBER)}))]).then((()=>{handleAnimationEnd&&frameEl.removeEventListener("animationend",handleAnimationEnd),setIsAnimatingOut(!1),closeModalResolve()}))}))),[isReducedMotion]);return{overlayClassname:isAnimatingOut?"is-animating-out":void 0,frameRef,frameStyle:{"--modal-frame-animation-duration":`${FRAME_ANIMATION_DURATION}`},closeModal}}();(0,react.useLayoutEffect)((()=>{if(!window.ResizeObserver||!childrenContainerRef.current)return;const resizeObserver=new ResizeObserver(isContentScrollable);return resizeObserver.observe(childrenContainerRef.current),isContentScrollable(),()=>{resizeObserver.disconnect()}}),[isContentScrollable,childrenContainerRef]);const onContentContainerScroll=(0,react.useCallback)((e=>{var _e$currentTarget$scro;const scrollY=null!==(_e$currentTarget$scro=e?.currentTarget?.scrollTop)&&void 0!==_e$currentTarget$scro?_e$currentTarget$scro:-1;!hasScrolledContent&&scrollY>0?setHasScrolledContent(!0):hasScrolledContent&&scrollY<=0&&setHasScrolledContent(!1)}),[hasScrolledContent]);let pressTarget=null;const overlayPressHandlers={onPointerDown:event=>{event.target===event.currentTarget&&(pressTarget=event.target,event.preventDefault())},onPointerUp:({target,button})=>{const isSameTarget=target===pressTarget;pressTarget=null,0===button&&isSameTarget&&closeModal().then((()=>onRequestClose()))}},modal=(0,jsx_runtime.jsx)("div",{ref:(0,use_merge_refs.A)([ref,forwardedRef]),className:(0,clsx.A)("components-modal__screen-overlay",overlayClassname,overlayClassnameProp),onKeyDown:(0,with_ignore_ime_events.n)((function handleEscapeKeyDown(event){!shouldCloseOnEsc||"Escape"!==event.code&&"Escape"!==event.key||event.defaultPrevented||(event.preventDefault(),closeModal().then((()=>onRequestClose(event))))})),...shouldCloseOnClickOutside?overlayPressHandlers:{},children:(0,jsx_runtime.jsx)(style_provider.A,{document,children:(0,jsx_runtime.jsx)("div",{className:(0,clsx.A)("components-modal__frame",sizeClass,className),style:{...frameStyle,...style},ref:(0,use_merge_refs.A)([frameRef,constrainedTabbingRef,focusReturnRef,"firstContentElement"!==focusOnMount?focusOnMountRef:null]),role,"aria-label":contentLabel,"aria-labelledby":contentLabel?void 0:headingId,"aria-describedby":aria.describedby,tabIndex:-1,onKeyDown,children:(0,jsx_runtime.jsxs)("div",{className:(0,clsx.A)("components-modal__content",{"hide-header":__experimentalHideHeader,"is-scrollable":hasScrollableContent,"has-scrolled-content":hasScrolledContent}),role:"document",onScroll:onContentContainerScroll,ref:contentRef,"aria-label":hasScrollableContent?(0,build_module.__)("Scrollable section"):void 0,tabIndex:hasScrollableContent?0:void 0,children:[!__experimentalHideHeader&&(0,jsx_runtime.jsxs)("div",{className:"components-modal__header",children:[(0,jsx_runtime.jsxs)("div",{className:"components-modal__header-heading-container",children:[icon&&(0,jsx_runtime.jsx)("span",{className:"components-modal__icon-container","aria-hidden":!0,children:icon}),title&&(0,jsx_runtime.jsx)("h1",{id:headingId,className:"components-modal__header-heading",children:title})]}),headerActions,isDismissible&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(component.A,{marginBottom:0,marginLeft:3}),(0,jsx_runtime.jsx)(src_button.Ay,{size:"small",onClick:event=>closeModal().then((()=>onRequestClose(event))),icon:library_close.A,label:closeButtonLabel||(0,build_module.__)("Close")})]})]}),(0,jsx_runtime.jsx)("div",{ref:(0,use_merge_refs.A)([childrenContainerRef,"firstContentElement"===focusOnMount?focusOnMountRef:null]),children})]})})})});return(0,react_dom.createPortal)((0,jsx_runtime.jsx)(ModalContext.Provider,{value:nestedDismissers,children:modal}),document.body)})),src_modal=Modal;try{Modal.displayName="Modal",Modal.__docgenInfo={description:'Modals give users information and choices related to a task they’re trying to\naccomplish. They can contain critical information, require decisions, or\ninvolve multiple tasks.\n\n```jsx\nimport { Button, Modal } from \'@wordpress/components\';\nimport { useState } from \'@wordpress/element\';\n\nconst MyModal = () => {\n  const [ isOpen, setOpen ] = useState( false );\n  const openModal = () => setOpen( true );\n  const closeModal = () => setOpen( false );\n\n  return (\n    <>\n      <Button variant="secondary" onClick={ openModal }>\n        Open Modal\n      </Button>\n      { isOpen && (\n        <Modal title="This is my modal" onRequestClose={ closeModal }>\n          <Button variant="secondary" onClick={ closeModal }>\n            My custom close button\n          </Button>\n        </Modal>\n      ) }\n    </>\n  );\n};\n```',displayName:"Modal",props:{aria:{defaultValue:null,description:"",name:"aria",required:!1,type:{name:"{ describedby?: string; labelledby?: string; }"}},bodyOpenClassName:{defaultValue:{value:"'modal-open'"},description:"Class name added to the body element when the modal is open.",name:"bodyOpenClassName",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The children elements.",name:"children",required:!0,type:{name:"ReactNode"}},className:{defaultValue:null,description:"If this property is added, it will an additional class name to the modal\ncontent `div`.",name:"className",required:!1,type:{name:"string"}},closeButtonLabel:{defaultValue:{value:"`__( 'Close' )`"},description:"Label on the close button.",name:"closeButtonLabel",required:!1,type:{name:"string"}},contentLabel:{defaultValue:null,description:"If this property is added, it will be added to the modal content `div` as\n`aria-label`.\n\nTitles are required for accessibility reasons, see `aria.labelledby` and\n`title` for other ways to provide a title.",name:"contentLabel",required:!1,type:{name:"string"}},focusOnMount:{defaultValue:{value:"true"},description:"If this property is true, it will focus the first tabbable element\nrendered in the modal.",name:"focusOnMount",required:!1,type:{name:'boolean | "firstElement" | "firstContentElement"'}},headerActions:{defaultValue:{value:"null"},description:"Elements that are injected into the modal header to the left of the close button (if rendered).\nHidden if `__experimentalHideHeader` is `true`.",name:"headerActions",required:!1,type:{name:"ReactNode"}},icon:{defaultValue:null,description:"If this property is added, an icon will be added before the title.",name:"icon",required:!1,type:{name:"Element"}},isDismissible:{defaultValue:{value:"true"},description:"If this property is set to false, the modal will not display a close icon\nand cannot be dismissed.",name:"isDismissible",required:!1,type:{name:"boolean"}},isFullScreen:{defaultValue:{value:"false"},description:"This property when set to `true` will render a full screen modal.",name:"isFullScreen",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"If this property is added it will cause the modal to render at a preset\nwidth, or expand to fill the screen. This prop will be ignored if\n`isFullScreen` is set to `true`.\n\nNote: `Modal`'s width can also be controlled by adjusting the width of the\nmodal's contents, or via CSS using the `style` prop.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"fill"'},{value:'"large"'},{value:'"medium"'}]}},onKeyDown:{defaultValue:null,description:"Handle the key down on the modal frame `div`.",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onRequestClose:{defaultValue:null,description:"This function is called to indicate that the modal should be closed.",name:"onRequestClose",required:!0,type:{name:"(event?: KeyboardEvent<HTMLDivElement> | SyntheticEvent<Element, Event>) => void"}},overlayClassName:{defaultValue:null,description:"If this property is added, it will an additional class name to the modal\noverlay `div`.",name:"overlayClassName",required:!1,type:{name:"string"}},role:{defaultValue:{value:"'dialog'"},description:"If this property is added, it will override the default role of the\nmodal.",name:"role",required:!1,type:{name:"AriaRole"}},shouldCloseOnClickOutside:{defaultValue:{value:"true"},description:"If this property is added, it will determine whether the modal requests\nto close when a mouse click occurs outside of the modal content.",name:"shouldCloseOnClickOutside",required:!1,type:{name:"boolean"}},shouldCloseOnEsc:{defaultValue:{value:"true"},description:"If this property is added, it will determine whether the modal requests\nto close when the escape key is pressed.",name:"shouldCloseOnEsc",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"If this property is added, it will be added to the modal frame `div`.",name:"style",required:!1,type:{name:"CSSProperties"}},title:{defaultValue:null,description:"This property is used as the modal header's title.\n\nTitles are required for accessibility reasons, see `aria.labelledby` and\n`contentLabel` for other ways to provide a title.",name:"title",required:!1,type:{name:"string"}},__experimentalHideHeader:{defaultValue:{value:"false"},description:"When set to `true`, the Modal's header (including the icon, title and\nclose button) will not be rendered.\n\n_Warning_: This property is still experimental. “Experimental” means this\nis an early implementation subject to drastic and breaking changes.",name:"__experimentalHideHeader",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/modal/index.tsx#Modal"]={docgenInfo:Modal.__docgenInfo,name:"Modal",path:"packages/components/src/modal/index.tsx#Modal"})}catch(__react_docgen_typescript_loader_error){}try{modal.displayName="modal",modal.__docgenInfo={description:'Modals give users information and choices related to a task they’re trying to\naccomplish. They can contain critical information, require decisions, or\ninvolve multiple tasks.\n\n```jsx\nimport { Button, Modal } from \'@wordpress/components\';\nimport { useState } from \'@wordpress/element\';\n\nconst MyModal = () => {\n  const [ isOpen, setOpen ] = useState( false );\n  const openModal = () => setOpen( true );\n  const closeModal = () => setOpen( false );\n\n  return (\n    <>\n      <Button variant="secondary" onClick={ openModal }>\n        Open Modal\n      </Button>\n      { isOpen && (\n        <Modal title="This is my modal" onRequestClose={ closeModal }>\n          <Button variant="secondary" onClick={ closeModal }>\n            My custom close button\n          </Button>\n        </Modal>\n      ) }\n    </>\n  );\n};\n```',displayName:"modal",props:{aria:{defaultValue:null,description:"",name:"aria",required:!1,type:{name:"{ describedby?: string; labelledby?: string; }"}},bodyOpenClassName:{defaultValue:{value:"'modal-open'"},description:"Class name added to the body element when the modal is open.",name:"bodyOpenClassName",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The children elements.",name:"children",required:!0,type:{name:"ReactNode"}},className:{defaultValue:null,description:"If this property is added, it will an additional class name to the modal\ncontent `div`.",name:"className",required:!1,type:{name:"string"}},closeButtonLabel:{defaultValue:{value:"`__( 'Close' )`"},description:"Label on the close button.",name:"closeButtonLabel",required:!1,type:{name:"string"}},contentLabel:{defaultValue:null,description:"If this property is added, it will be added to the modal content `div` as\n`aria-label`.\n\nTitles are required for accessibility reasons, see `aria.labelledby` and\n`title` for other ways to provide a title.",name:"contentLabel",required:!1,type:{name:"string"}},focusOnMount:{defaultValue:{value:"true"},description:"If this property is true, it will focus the first tabbable element\nrendered in the modal.",name:"focusOnMount",required:!1,type:{name:'boolean | "firstElement" | "firstContentElement"'}},headerActions:{defaultValue:{value:"null"},description:"Elements that are injected into the modal header to the left of the close button (if rendered).\nHidden if `__experimentalHideHeader` is `true`.",name:"headerActions",required:!1,type:{name:"ReactNode"}},icon:{defaultValue:null,description:"If this property is added, an icon will be added before the title.",name:"icon",required:!1,type:{name:"Element"}},isDismissible:{defaultValue:{value:"true"},description:"If this property is set to false, the modal will not display a close icon\nand cannot be dismissed.",name:"isDismissible",required:!1,type:{name:"boolean"}},isFullScreen:{defaultValue:{value:"false"},description:"This property when set to `true` will render a full screen modal.",name:"isFullScreen",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"If this property is added it will cause the modal to render at a preset\nwidth, or expand to fill the screen. This prop will be ignored if\n`isFullScreen` is set to `true`.\n\nNote: `Modal`'s width can also be controlled by adjusting the width of the\nmodal's contents, or via CSS using the `style` prop.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"fill"'},{value:'"large"'},{value:'"medium"'}]}},onKeyDown:{defaultValue:null,description:"Handle the key down on the modal frame `div`.",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onRequestClose:{defaultValue:null,description:"This function is called to indicate that the modal should be closed.",name:"onRequestClose",required:!0,type:{name:"(event?: KeyboardEvent<HTMLDivElement> | SyntheticEvent<Element, Event>) => void"}},overlayClassName:{defaultValue:null,description:"If this property is added, it will an additional class name to the modal\noverlay `div`.",name:"overlayClassName",required:!1,type:{name:"string"}},role:{defaultValue:{value:"'dialog'"},description:"If this property is added, it will override the default role of the\nmodal.",name:"role",required:!1,type:{name:"AriaRole"}},shouldCloseOnClickOutside:{defaultValue:{value:"true"},description:"If this property is added, it will determine whether the modal requests\nto close when a mouse click occurs outside of the modal content.",name:"shouldCloseOnClickOutside",required:!1,type:{name:"boolean"}},shouldCloseOnEsc:{defaultValue:{value:"true"},description:"If this property is added, it will determine whether the modal requests\nto close when the escape key is pressed.",name:"shouldCloseOnEsc",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"If this property is added, it will be added to the modal frame `div`.",name:"style",required:!1,type:{name:"CSSProperties"}},title:{defaultValue:null,description:"This property is used as the modal header's title.\n\nTitles are required for accessibility reasons, see `aria.labelledby` and\n`contentLabel` for other ways to provide a title.",name:"title",required:!1,type:{name:"string"}},__experimentalHideHeader:{defaultValue:{value:"false"},description:"When set to `true`, the Modal's header (including the icon, title and\nclose button) will not be rendered.\n\n_Warning_: This property is still experimental. “Experimental” means this\nis an early implementation subject to drastic and breaking changes.",name:"__experimentalHideHeader",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/modal/index.tsx#modal"]={docgenInfo:modal.__docgenInfo,name:"modal",path:"packages/components/src/modal/index.tsx#modal"})}catch(__react_docgen_typescript_loader_error){}},"./packages/components/src/style-provider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__,N:()=>StyleProvider});var _emotion_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@emotion/react/dist/emotion-element-699e6908.browser.esm.js"),_emotion_cache__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"),uuid__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/components/node_modules/uuid/dist/esm-browser/v4.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const uuidCache=new Set,containerCacheMap=new WeakMap,memoizedCreateCacheWithContainer=container=>{if(containerCacheMap.has(container))return containerCacheMap.get(container);let key=uuid__WEBPACK_IMPORTED_MODULE_2__.A().replace(/[0-9]/g,"");for(;uuidCache.has(key);)key=uuid__WEBPACK_IMPORTED_MODULE_2__.A().replace(/[0-9]/g,"");uuidCache.add(key);const cache=(0,_emotion_cache__WEBPACK_IMPORTED_MODULE_0__.A)({container,key});return containerCacheMap.set(container,cache),cache};function StyleProvider(props){const{children,document}=props;if(!document)return null;const cache=memoizedCreateCacheWithContainer(document.head);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_emotion_react__WEBPACK_IMPORTED_MODULE_3__.C,{value:cache,children})}StyleProvider.displayName="StyleProvider";const __WEBPACK_DEFAULT_EXPORT__=StyleProvider;try{StyleProvider.displayName="StyleProvider",StyleProvider.__docgenInfo={description:"",displayName:"StyleProvider",props:{children:{defaultValue:null,description:"The children elements.",name:"children",required:!0,type:{name:"ReactNode"}},document:{defaultValue:null,description:"Current document.",name:"document",required:!0,type:{name:"Document"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/style-provider/index.tsx#StyleProvider"]={docgenInfo:StyleProvider.__docgenInfo,name:"StyleProvider",path:"packages/components/src/style-provider/index.tsx#StyleProvider"})}catch(__react_docgen_typescript_loader_error){}},"./packages/components/src/utils/with-ignore-ime-events.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function withIgnoreIMEEvents(keydownHandler){return event=>{const{isComposing}="nativeEvent"in event?event.nativeEvent:event;isComposing||229===event.keyCode||keydownHandler(event)}}__webpack_require__.d(__webpack_exports__,{n:()=>withIgnoreIMEEvents})}}]);